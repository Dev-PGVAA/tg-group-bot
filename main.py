#!/usr/bin/env python3
"""
üì¶ –ú–µ–Ω–µ–¥–∂–µ—Ä Telegram –±–æ—Ç–æ–≤ (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞)

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 main.py start   - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    python3 main.py stop    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    python3 main.py restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    python3 main.py status  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤
    python3 main.py logs    - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
"""

import sys
import os
import subprocess
import signal
import time
from pathlib import Path

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ---
PROJECT_DIR = Path(__file__).resolve().parent
PID_DIR = PROJECT_DIR / "data" / "pids"
LOG_DIR = PROJECT_DIR / "data" / "logs"

PID_DIR.mkdir(parents=True, exist_ok=True)
LOG_DIR.mkdir(parents=True, exist_ok=True)

# --- –ë–æ—Ç—ã –∏ WebPanel ---
BOTS = {
    # "Forwarder": "src.bot.forwarder",
    # "Records": "src.bot.sil_bot",
    "WebPanel": "src.webpanel.webpanel",
}

class BotManager:
    def __init__(self):
        pass

    def _pid_file(self, name): return PID_DIR / f"{name.lower()}.pid"
    def _log_file(self, name): return LOG_DIR / f"{name.lower()}.log"

    def is_running(self, name):
        pid_file = self._pid_file(name)
        if not pid_file.exists():
            return False
        try:
            pid = int(pid_file.read_text().strip())
            os.kill(pid, 0)
            return True
        except (OSError, ValueError, ProcessLookupError):
            pid_file.unlink(missing_ok=True)
            return False

    def get_pid(self, name):
        pid_file = self._pid_file(name)
        return int(pid_file.read_text().strip()) if pid_file.exists() else None

    def start(self):
        for name, module in BOTS.items():
            if self.is_running(name):
                print(f"‚ö†Ô∏è  {name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {self.get_pid(name)})")
                continue

            print(f"üöÄ –ó–∞–ø—É—Å–∫ {name}...")
            log_file = open(self._log_file(name), "a")
            process = subprocess.Popen(
                [sys.executable, "-m", module],
                stdout=log_file,
                stderr=subprocess.STDOUT,
                cwd=PROJECT_DIR,
                start_new_session=True
            )
            self._pid_file(name).write_text(str(process.pid))
            print(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid}) ‚Äî –ª–æ–≥–∏: {self._log_file(name)}")

    def stop(self):
        for name in BOTS.keys():
            if not self.is_running(name):
                print(f"‚ö†Ô∏è  {name} –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                continue
            pid = self.get_pid(name)
            print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name} (PID: {pid})...")
            try:
                os.kill(pid, signal.SIGTERM)
                for _ in range(10):
                    if not self.is_running(name):
                        break
                    time.sleep(0.5)
                if self.is_running(name):
                    os.kill(pid, signal.SIGKILL)
                self._pid_file(name).unlink(missing_ok=True)
                print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {name}: {e}")

    def restart(self):
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
        self.stop()
        time.sleep(1)
        self.start()

    def status(self):
        print("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤:\n")
        for name in BOTS.keys():
            if self.is_running(name):
                pid = self.get_pid(name)
                print(f"‚úÖ {name}: –∑–∞–ø—É—â–µ–Ω (PID {pid})")
            else:
                print(f"‚ö†Ô∏è  {name}: –Ω–µ –∑–∞–ø—É—â–µ–Ω")

    def logs(self, name=None, lines=40):
        if name:
            log_file = self._log_file(name)
            if not log_file.exists():
                print(f"‚ùå –õ–æ–≥ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            print(f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ {name}:\n")
            os.system(f"tail -n {lines} {log_file}")
        else:
            print("üìú –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏:")
            for name in BOTS.keys():
                print(f"  - {name}: {self._log_file(name)}")

def print_help():
    print("""
ü§ñ Bot Manager ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–∞–º–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 main.py <–∫–æ–º–∞–Ω–¥–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]

–ö–æ–º–∞–Ω–¥—ã:
    start       ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    stop        ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    restart     ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    status      ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logs [bot]  ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤
    help        ‚Äî –ø–æ–º–æ—â—å
""")

def main():
    manager = BotManager()
    if len(sys.argv) < 2:
        print_help()
        return

    cmd = sys.argv[1].lower()
    args = sys.argv[2:] if len(sys.argv) > 2 else []

    if cmd == "start":
        manager.start()
    elif cmd == "stop":
        manager.stop()
    elif cmd == "restart":
        manager.restart()
    elif cmd == "status":
        manager.status()
    elif cmd == "logs":
        manager.logs(args[0] if args else None)
    else:
        print_help()

if __name__ == "__main__":
    main()
