#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–∞–º–∏
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 bot_manager.py start   - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ
    python3 bot_manager.py stop    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    python3 bot_manager.py restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    python3 bot_manager.py status  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤
    python3 bot_manager.py logs    - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
"""

import sys
import os
import subprocess
import signal
import time
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_DIR = Path(__file__).parent
PID_DIR = PROJECT_DIR / "data" / "pids"
LOG_DIR = PROJECT_DIR / "data" / "logs"
MAIN_SCRIPT = PROJECT_DIR / "src" / "main.py"

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
PID_DIR.mkdir(parents=True, exist_ok=True)
LOG_DIR.mkdir(parents=True, exist_ok=True)

class BotManager:
    def __init__(self):
        self.pid_file = PID_DIR / "bot.pid"
        self.log_file = LOG_DIR / "bot_manager.log"
        
    def is_running(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç"""
        if not self.pid_file.exists():
            return False
        
        try:
            with open(self.pid_file, 'r') as f:
                pid = int(f.read().strip())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            os.kill(pid, 0)
            return True
        except (ProcessLookupError, ValueError, OSError):
            # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID —Ñ–∞–π–ª
            if self.pid_file.exists():
                self.pid_file.unlink()
            return False
    
    def get_pid(self):
        """–ü–æ–ª—É—á–∞–µ—Ç PID –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        if self.pid_file.exists():
            try:
                with open(self.pid_file, 'r') as f:
                    return int(f.read().strip())
            except (ValueError, OSError):
                return None
        return None
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        if self.is_running():
            print("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            print(f"   PID: {self.get_pid()}")
            return False
        
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ñ–æ–Ω–µ —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞
        process = subprocess.Popen(
            [sys.executable, str(MAIN_SCRIPT)],
            stdout=open(self.log_file, 'a'),
            stderr=subprocess.STDOUT,
            start_new_session=True,  # –û—Ç–¥–µ–ª—è–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            cwd=PROJECT_DIR
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
        with open(self.pid_file, 'w') as f:
            f.write(str(process.pid))
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        time.sleep(2)
        
        if self.is_running():
            print(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! PID: {process.pid}")
            print(f"   –õ–æ–≥–∏: {self.log_file}")
            print(f"   –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: python3 bot_manager.py logs")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:")
            print(f"   tail -f {self.log_file}")
            return False
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        if not self.is_running():
            print("‚ö†Ô∏è  –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        
        pid = self.get_pid()
        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ (PID: {pid})...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGTERM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            os.kill(pid, signal.SIGTERM)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            for i in range(10):
                if not self.is_running():
                    break
                time.sleep(0.5)
            
            # –ï—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º SIGKILL
            if self.is_running():
                print("   –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                os.kill(pid, signal.SIGKILL)
                time.sleep(1)
            
            if self.pid_file.exists():
                self.pid_file.unlink()
            
            print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except ProcessLookupError:
            print("‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            if self.pid_file.exists():
                self.pid_file.unlink()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
            return False
    
    def restart(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.stop()
        time.sleep(1)
        return self.start()
    
    def status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        if self.is_running():
            pid = self.get_pid()
            print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            print(f"   PID: {pid}")
            print(f"   –õ–æ–≥ —Ñ–∞–π–ª: {self.log_file}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            try:
                with open(f'/proc/{pid}/status', 'r') as f:
                    for line in f:
                        if line.startswith('VmRSS:'):
                            print(f"   –ü–∞–º—è—Ç—å: {line.split()[1]} KB")
                            break
            except:
                pass
        else:
            print("‚ö†Ô∏è  –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    
    def show_logs(self, lines=50):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤"""
        if not self.log_file.exists():
            print("‚ö†Ô∏è  –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:\n")
        try:
            result = subprocess.run(
                ['tail', '-n', str(lines), str(self.log_file)],
                capture_output=True,
                text=True
            )
            print(result.stdout)
        except Exception as e:
            # –ï—Å–ª–∏ tail –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
            with open(self.log_file, 'r') as f:
                all_lines = f.readlines()
                for line in all_lines[-lines:]:
                    print(line, end='')

def print_help():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É"""
    print("""
ü§ñ –ú–µ–Ω–µ–¥–∂–µ—Ä Telegram –±–æ—Ç–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 bot_manager.py <–∫–æ–º–∞–Ω–¥–∞>

–ö–æ–º–∞–Ω–¥—ã:
    start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
    restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    status   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    logs     - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 —Å—Ç—Ä–æ–∫)
    help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
    python3 bot_manager.py start
    python3 bot_manager.py logs
    """)

def main():
    manager = BotManager()
    
    if len(sys.argv) < 2:
        print_help()
        return
    
    command = sys.argv[1].lower()
    
    commands = {
        'start': manager.start,
        'stop': manager.stop,
        'restart': manager.restart,
        'status': manager.status,
        'logs': lambda: manager.show_logs(int(sys.argv[2]) if len(sys.argv) > 2 else 50),
        'help': print_help
    }
    
    if command in commands:
        commands[command]()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print_help()
        sys.exit(1)

if __name__ == "__main__":
    main()