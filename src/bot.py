#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DiedOnSteroidsBot
–ö–æ–º–∞–Ω–¥—ã:
/sil ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥ (–ñ–∏–º / –ü—Ä–∏—Å–µ–¥ / –¢—è–≥–∞ / –°–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
/top ‚Äî —Ç–æ–ø –ø–æ —Å—É–º–º–µ
/table ‚Äî PNG-—Ç–∞–±–ª–∏—Ü–∞
/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
"""
import os
import io
import json
import re
import logging
from datetime import datetime, timezone, timedelta

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import rcParams
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ config.py
# config.py –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: BOT_TOKEN, GROUP_ID, TOPIC_SIL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ), REPORT_INTERVAL_DAYS (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ), RECORDS_FILE (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ), DATE_FORMAT (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
import config

LOG_FILE = "bot_errors.log"

logging.basicConfig(
    level=logging.WARNING,
    format="%(asctime)s %(levelname)s: %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()  # –£–¥–∞–ª–∏ —ç—Ç—É —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
    ]
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
for noisy_logger in ["httpx", "telegram", "matplotlib", "PIL"]:
    logging.getLogger(noisy_logger).setLevel(logging.ERROR)

log = logging.getLogger(__name__)

# -------------------- –ö–û–ù–§–ò–ì --------------------
BOT_TOKEN = getattr(config, "BOT_TOKEN", None)
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in config.py")

RECORDS_FILE = getattr(config, "RECORDS_FILE", "records.json")
TOPIC_SIL = int(getattr(config, "TOPIC_SIL", 0)) if getattr(config, "TOPIC_SIL", None) is not None else 0
GROUP_ID = int(getattr(config, "GROUP_ID", 0)) if getattr(config, "GROUP_ID", None) is not None else 0
REPORT_INTERVAL_DAYS = int(getattr(config, "REPORT_INTERVAL_DAYS", 14))
DATE_FORMAT = getattr(config, "DATE_FORMAT", "%d-%m-%Y")

MOVE_MAP = {
    "bench": "–ñ–∏–º",
    "squat": "–ü—Ä–∏—Å–µ–¥",
    "deadlift": "–¢—è–≥–∞",
}

# -------------------- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ --------------------
def load_records():
    if os.path.exists(RECORDS_FILE):
        try:
            with open(RECORDS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∑–∞–ø–∏—Å–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞—é –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
            return []
    return []

def save_records(records):
    try:
        with open(RECORDS_FILE, "w", encoding="utf-8") as f:
            json.dump(records, f, ensure_ascii=False, indent=2)
    except Exception:
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∑–∞–ø–∏—Å–µ–π")

# -------------------- –£—Ç–∏–ª–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è --------------------
async def delete_message_safe(bot, chat_id, message_id):
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        pass

async def safe_reply(bot, chat_id, text, thread_id=None, **kwargs):
    try:
        if thread_id:
            return await bot.send_message(chat_id=chat_id, text=text, message_thread_id=thread_id, **kwargs)
        else:
            return await bot.send_message(chat_id=chat_id, text=text, **kwargs)
    except Exception as e:
        log.warning("safe_reply: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ thread_id=%s: %s. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ thread_id.", thread_id, e)
        try:
            return await bot.send_message(chat_id=chat_id, text=text, **kwargs)
        except Exception:
            log.exception("safe_reply: –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            raise

async def safe_reply_photo(bot, chat_id, photo_buf, caption=None, thread_id=None, **kwargs):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –±—É—Ñ–µ—Ä –Ω–µ –ø—É—Å—Ç–æ–π
        if photo_buf is None:
            log.warning("safe_reply_photo: –ø–µ—Ä–µ–¥–∞–Ω None –≤–º–µ—Å—Ç–æ BytesIO ‚Äî –æ—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return None
        # –ï—Å–ª–∏ —ç—Ç–æ file-like ‚Äî –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä
        try:
            nbytes = photo_buf.getbuffer().nbytes
        except Exception:
            nbytes = None
        if nbytes == 0:
            log.warning("safe_reply_photo: –±—É—Ñ–µ—Ä –ø—É—Å—Ç (0 –±–∞–π—Ç) ‚Äî –æ—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return None
        photo_buf.seek(0)
        if thread_id:
            return await bot.send_photo(chat_id=chat_id, photo=photo_buf, caption=caption, message_thread_id=thread_id, **kwargs)
        else:
            return await bot.send_photo(chat_id=chat_id, photo=photo_buf, caption=caption, **kwargs)
    except Exception as e:
        log.warning("safe_reply_photo: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ thread_id=%s: %s. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ thread_id.", thread_id, e)
        try:
            photo_buf.seek(0)
            return await bot.send_photo(chat_id=chat_id, photo=photo_buf, caption=caption, **kwargs)
        except Exception:
            log.exception("safe_reply_photo: –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ")
            raise

# -------------------- –ö–æ–º–∞–Ω–¥—ã --------------------
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìã –ö–æ–º–∞–Ω–¥—ã\n\n"
        "/sil ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥ (–ñ–∏–º / –ü—Ä–∏—Å–µ–¥ / –¢—è–≥–∞ / –°–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)\n"
        "/top ‚Äî —Ç–æ–ø –ø–æ —Å—É–º–º–µ\n"
        "/table ‚Äî —Ç–∞–±–ª–∏—Ü–∞ PNG\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/channels\n"
        "/channels add @username\n"
        "/channels remove @username"
    )
    thread_id = getattr(update.message, "message_thread_id", None)
    await safe_reply(context.bot, update.effective_chat.id, text, thread_id=thread_id or (TOPIC_SIL if TOPIC_SIL else None))

async def sil_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ñ–∏–º", callback_data="bench"),
         InlineKeyboardButton("–ü—Ä–∏—Å–µ–¥", callback_data="squat")],
        [InlineKeyboardButton("–¢—è–≥–∞", callback_data="deadlift"),
         InlineKeyboardButton("–°–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ", callback_data="custom")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    thread_id = getattr(update.message, "message_thread_id", None)
    sent = await safe_reply(context.bot, update.effective_chat.id, "–í—ã–±–µ—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–µ üí™", thread_id=thread_id or (TOPIC_SIL if TOPIC_SIL else None), reply_markup=reply_markup)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –±–æ—Ç–∞-—Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª—è—Ç—å –µ–≥–æ (–¥–∏–∞–ª–æ–≥)
    if sent:
        context.user_data["bot_msgs"] = [sent.message_id]

async def callback_movement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    context.user_data["movement"] = data

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é, –µ—Å–ª–∏ –±—ã–ª–æ
    if "bot_msgs" in context.user_data:
        for mid in context.user_data["bot_msgs"]:
            await delete_message_safe(context.bot, query.message.chat_id, mid)

    thread_id = getattr(query.message, "message_thread_id", None)

    if data == "custom":
        sent = await safe_reply(context.bot, query.message.chat_id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê—Ä–º–µ–π—Å–∫–∏–π –∂–∏–º):", thread_id=thread_id or (TOPIC_SIL if TOPIC_SIL else None))
        context.user_data["waiting_for_custom_name"] = True
        if sent:
            context.user_data["bot_msgs"] = [sent.message_id]
    else:
        sent = await safe_reply(context.bot, query.message.chat_id, "–í–≤–µ–¥–∏ –≤–µ—Å –≤ –∫–≥ (–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100–∫–≥):", thread_id=thread_id or (TOPIC_SIL if TOPIC_SIL else None))
        if sent:
            context.user_data["bot_msgs"] = [sent.message_id]

async def handle_text_for_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    thread_id = getattr(update.message, "message_thread_id", None)

    # –µ—Å–ª–∏ –∂–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
    if context.user_data.get("waiting_for_custom_name"):
        context.user_data["custom_name"] = text
        context.user_data.pop("waiting_for_custom_name")
        sent = await safe_reply(context.bot, update.message.chat_id, f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤–µ—Å –¥–ª—è {text} (–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100–∫–≥):", thread_id=thread_id or (TOPIC_SIL if TOPIC_SIL else None))
        if sent:
            context.user_data["bot_msgs"] = [sent.message_id]
        return

    if "movement" not in context.user_data:
        # –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return

    # –ü–∞—Ä—Å–∏–º –≤–µ—Å
    m = re.search(r"(\d+[.,]?\d*)", text)
    if not m:
        await safe_reply(context.bot, update.effective_chat.id, "‚ö†Ô∏è –í–µ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–∏–º–µ—Ä: 100", thread_id=thread_id)
        return
    try:
        weight = int(float(m.group(1).replace(",", ".")))
    except Exception:
        await safe_reply(context.bot, update.effective_chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Å–∞. –ü—Ä–∏–º–µ—Ä: 100", thread_id=thread_id)
        return

    movement_key = context.user_data.get("movement")
    if movement_key == "custom":
        movement_name = context.user_data.get("custom_name", "–î—Ä—É–≥–æ–µ")
    else:
        movement_name = MOVE_MAP.get(movement_key, "–î—Ä—É–≥–æ–µ")

    user = update.effective_user
    username = f"@{user.username}" if user.username else user.full_name

    record = {
        "user": username,
        "movement": movement_name,
        "weight": weight,
        "date": datetime.now(timezone.utc).strftime(DATE_FORMAT),
    }

    records = load_records()
    best_for_move = max((r["weight"] for r in records if r["movement"] == movement_name), default=0)
    is_new_record = weight > best_for_move
    records.append(record)
    save_records(records)

    # –æ—á–∏—Å—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞
    if "bot_msgs" in context.user_data:
        for mid in context.user_data["bot_msgs"]:
            await delete_message_safe(context.bot, update.message.chat_id, mid)
    context.user_data.clear()

    if is_new_record:
        msg = f"üí• –ù–û–í–´–ô –†–ï–ö–û–†–î!\n{username} ‚Äî {weight} –∫–≥ –≤ {movement_name.upper()}!"
    else:
        msg = f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {username} ‚Äî {weight} –∫–≥ –≤ {movement_name.upper()}"

    await safe_reply(context.bot, update.message.chat_id, msg, thread_id=thread_id or (TOPIC_SIL if TOPIC_SIL else None))

async def top_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    records = load_records()
    thread_id = getattr(update.message, "message_thread_id", None)

    if not records:
        await safe_reply(context.bot, update.effective_chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", thread_id=thread_id or (TOPIC_SIL if TOPIC_SIL else None))
        return
    totals = {}
    for r in records:
        totals.setdefault(r["user"], 0)
        totals[r["user"]] += float(r["weight"])
    top_users = sorted(totals.items(), key=lambda x: x[1], reverse=True)[:10]
    lines = ["üèÜ –¢–æ–ø –ø–æ —Å—É–º–º–µ:"]
    for u, s in top_users:
        lines.append(f"{u} ‚Äî {int(s)} –∫–≥")
    await safe_reply(context.bot, update.effective_chat.id, "\n".join(lines), thread_id=thread_id or (TOPIC_SIL if TOPIC_SIL else None))

# -------------------- –¢–∞–±–ª–∏—Ü–∞ PNG --------------------
def render_table_image(records):
    # –í–æ–∑–≤—Ä–∞—Ç BytesIO —Å PNG
    if not records:
        fig, ax = plt.subplots(figsize=(6, 2))
        ax.axis("off")
        ax.text(0.5, 0.5, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π", ha="center", va="center", fontsize=14)
        buf = io.BytesIO()
        fig.savefig(buf, format="png", dpi=150, bbox_inches="tight")
        plt.close(fig)
        buf.seek(0)
        return buf

    df = pd.DataFrame(records)[["user", "movement", "date", "weight"]]
    df = df.rename(columns={"user": "–ò–º—è", "movement": "–î–≤–∏–∂–µ–Ω–∏–µ", "date": "–î–∞—Ç–∞", "weight": "–í–µ—Å (–∫–≥)"})

    fig, ax = plt.subplots(figsize=(10, max(2.5, 0.4 * len(df))))
    ax.axis("off")
    rcParams.update({'font.size': 10})
    ax.text(0.5, 1.03, "–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤", ha='center', va='bottom', fontsize=14, fontweight='bold', transform=ax.transAxes)
    table = ax.table(cellText=df.values, colLabels=df.columns, cellLoc='center', loc='center')
    for (row, col), cell in table.get_celld().items():
        if row == 0:
            cell.set_text_props(weight='bold', color='white')
            cell.set_facecolor('#2E86AB')
        else:
            cell.set_facecolor('#F7FAFC' if row % 2 == 0 else 'white')
        cell.set_edgecolor('#CCCCCC')
    table.auto_set_font_size(False)
    table.set_fontsize(10)
    table.scale(1, 1.2)
    buf = io.BytesIO()
    fig.savefig(buf, format='png', dpi=150, bbox_inches='tight')
    plt.close(fig)
    buf.seek(0)
    return buf

async def table_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    records = load_records()
    buf = render_table_image(records)

    # –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–≥–æ –±—É—Ñ–µ—Ä–∞
    try:
        size = buf.getbuffer().nbytes
    except Exception:
        size = None
    if size == 0:
        log.warning("table_cmd: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –ø—É—Å—Ç ‚Äî –æ—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        await safe_reply(context.bot, update.effective_chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É (–ø—É—Å—Ç–æ–π —Ñ–∞–π–ª).", thread_id=getattr(update.message, "message_thread_id", None) or (TOPIC_SIL if TOPIC_SIL else None))
        return

    thread_id = getattr(update.message, "message_thread_id", None)
    await safe_reply_photo(context.bot, update.effective_chat.id, buf, "üìä –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤", thread_id=thread_id or (TOPIC_SIL if TOPIC_SIL else None))

# -------------------- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç --------------------
async def send_auto_report(context: ContextTypes.DEFAULT_TYPE):
    try:
        records = load_records()
        buf = render_table_image(records)

        try:
            size = buf.getbuffer().nbytes
        except Exception:
            size = None
        if size == 0:
            log.warning("send_auto_report: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –ø—É—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
            return

        buf.seek(0)
        caption = f"üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç ({datetime.now().strftime(DATE_FORMAT)})"
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ TOPIC_SIL –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –≤ GROUP_ID
        if TOPIC_SIL:
            await context.bot.send_photo(chat_id=GROUP_ID, photo=buf, caption=caption, message_thread_id=TOPIC_SIL)
        else:
            await context.bot.send_photo(chat_id=GROUP_ID, photo=buf, caption=caption)
        log.info("–ê–≤—Ç–æ–æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç–∞: %s", e)

# -------------------- –ó–∞–ø—É—Å–∫ --------------------
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –•—ç–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("sil", sil_menu))
    app.add_handler(CommandHandler("top", top_cmd))
    app.add_handler(CommandHandler("table", table_cmd))
    app.add_handler(CallbackQueryHandler(callback_movement))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_for_weight))

    # –ê–≤—Ç–æ–æ—Ç—á—ë—Ç —á–µ—Ä–µ–∑ job_queue (–≤ —Ñ–æ–Ω–µ)
    job_queue = app.job_queue
    job_queue.run_repeating(send_auto_report, interval=timedelta(days=REPORT_INTERVAL_DAYS), first=timedelta(seconds=10))

    log.info("‚úÖ Died on steroids bot - –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
