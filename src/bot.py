#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DiedOnSteroidsBot
–ö–æ–º–∞–Ω–¥—ã:
/sil ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥ (–ñ–∏–º / –ü—Ä–∏—Å–µ–¥ / –¢—è–≥–∞ / –°–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
/top ‚Äî —Ç–æ–ø –ø–æ —Å—É–º–º–µ
/table ‚Äî PNG-—Ç–∞–±–ª–∏—Ü–∞
/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
"""
import os
import io
import json
import re
import time
import logging
from datetime import datetime, timezone, timedelta

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import rcParams
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.error import TelegramError, NetworkError
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

import config

# -------------------- –õ–û–ì–ò --------------------
LOG_FILE = "bot_errors.log"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

for noisy_logger in ["httpx", "telegram", "matplotlib", "PIL"]:
    logging.getLogger(noisy_logger).setLevel(logging.ERROR)

log = logging.getLogger(__name__)

# -------------------- –ö–û–ù–§–ò–ì --------------------
BOT_TOKEN = config.BOT_TOKEN
GROUP_ID = config.GROUP_ID
TOPIC_SIL = config.TOPIC_SIL
RECORDS_FILE = config.RECORDS_FILE
REPORT_INTERVAL_DAYS = config.REPORT_INTERVAL_DAYS
DATE_FORMAT = config.DATE_FORMAT

MOVE_MAP = {
    "bench": "–ñ–∏–º",
    "squat": "–ü—Ä–∏—Å–µ–¥",
    "deadlift": "–¢—è–≥–∞",
}

# -------------------- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ --------------------
def load_records():
    if os.path.exists(RECORDS_FILE):
        try:
            with open(RECORDS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∑–∞–ø–∏—Å–µ–π")
            return []
    return []

def save_records(records):
    try:
        with open(RECORDS_FILE, "w", encoding="utf-8") as f:
            json.dump(records, f, ensure_ascii=False, indent=2)
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∑–∞–ø–∏—Å–µ–π")

# -------------------- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è --------------------
async def delete_message_safe(bot, chat_id, message_id):
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception:
        pass

async def safe_reply(bot, chat_id, text, thread_id=None, **kwargs):
    try:
        if thread_id:
            return await bot.send_message(chat_id, text, message_thread_id=thread_id, **kwargs)
        return await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        log.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            return await bot.send_message(chat_id, text, **kwargs)
        except Exception:
            log.exception("safe_reply: –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return None

async def safe_reply_photo(bot, chat_id, photo_buf, caption=None, thread_id=None, **kwargs):
    try:
        if not photo_buf:
            return None
        photo_buf.seek(0)
        if thread_id:
            return await bot.send_photo(chat_id, photo=photo_buf, caption=caption, message_thread_id=thread_id, **kwargs)
        return await bot.send_photo(chat_id, photo=photo_buf, caption=caption, **kwargs)
    except Exception as e:
        log.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        try:
            photo_buf.seek(0)
            return await bot.send_photo(chat_id, photo=photo_buf, caption=caption, **kwargs)
        except Exception:
            log.exception("safe_reply_photo: –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ")
            return None

# -------------------- –ö–æ–º–∞–Ω–¥—ã --------------------
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìã –ö–æ–º–∞–Ω–¥—ã\n\n"
        "/sil ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥ (–ñ–∏–º / –ü—Ä–∏—Å–µ–¥ / –¢—è–≥–∞ / –°–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)\n"
        "/top ‚Äî —Ç–æ–ø –ø–æ —Å—É–º–º–µ\n"
        "/table ‚Äî —Ç–∞–±–ª–∏—Ü–∞ PNG\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "/channels\n"
        "/channels add @username\n"
        "/channels remove @username"
    )
    thread_id = getattr(update.message, "message_thread_id", None)
    await safe_reply(context.bot, update.effective_chat.id, text, thread_id=thread_id or TOPIC_SIL)

async def sil_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ñ–∏–º", callback_data="bench"),
         InlineKeyboardButton("–ü—Ä–∏—Å–µ–¥", callback_data="squat")],
        [InlineKeyboardButton("–¢—è–≥–∞", callback_data="deadlift"),
         InlineKeyboardButton("–°–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ", callback_data="custom")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    thread_id = getattr(update.message, "message_thread_id", None)
    sent = await safe_reply(context.bot, update.effective_chat.id, "–í—ã–±–µ—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–µ üí™", thread_id=thread_id or TOPIC_SIL, reply_markup=reply_markup)
    if sent:
        context.user_data["bot_msgs"] = [sent.message_id]

async def callback_movement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    context.user_data["movement"] = data
    if "bot_msgs" in context.user_data:
        for mid in context.user_data["bot_msgs"]:
            await delete_message_safe(context.bot, query.message.chat_id, mid)
    thread_id = getattr(query.message, "message_thread_id", None)
    if data == "custom":
        sent = await safe_reply(context.bot, query.message.chat_id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:", thread_id=thread_id or TOPIC_SIL)
        context.user_data["waiting_for_custom_name"] = True
        if sent:
            context.user_data["bot_msgs"] = [sent.message_id]
    else:
        sent = await safe_reply(context.bot, query.message.chat_id, "–í–≤–µ–¥–∏ –≤–µ—Å –≤ –∫–≥:", thread_id=thread_id or TOPIC_SIL)
        if sent:
            context.user_data["bot_msgs"] = [sent.message_id]

async def handle_text_for_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
    text = update.message.text.strip()
    thread_id = getattr(update.message, "message_thread_id", None)
    if context.user_data.get("waiting_for_custom_name"):
        context.user_data["custom_name"] = text
        context.user_data.pop("waiting_for_custom_name")
        sent = await safe_reply(context.bot, update.message.chat_id, f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤–µ—Å –¥–ª—è {text} (–ø—Ä–∏–º–µ—Ä: 100–∫–≥):", thread_id=thread_id or TOPIC_SIL)
        if sent:
            context.user_data["bot_msgs"] = [sent.message_id]
        return
    if "movement" not in context.user_data:
        return
    m = re.search(r"(\d+[.,]?\d*)", text)
    if not m:
        await safe_reply(context.bot, update.effective_chat.id, "‚ö†Ô∏è –í–µ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 87.5", thread_id=thread_id)
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥—Ä–æ–±–Ω—ã–π –≤–µ—Å
    weight = float(m.group(1).replace(",", "."))

    # –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –≤—ã–≤–æ–¥ (100 ‚Üí "100", 87.5 ‚Üí "87.5")
    weight_str = f"{weight:.2f}".rstrip("0").rstrip(".")
    movement_key = context.user_data.get("movement")
    movement_name = context.user_data.get("custom_name", "–î—Ä—É–≥–æ–µ") if movement_key == "custom" else MOVE_MAP.get(movement_key, "–î—Ä—É–≥–æ–µ")
    user = update.effective_user
    username = f"@{user.username}" if user.username else user.full_name
    record = {"user": username, "movement": movement_name, "weight": weight, "date": datetime.now(timezone.utc).strftime(DATE_FORMAT)}
    records = load_records()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–º—É –∂–µ –¥–≤–∏–∂–µ–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
    records = [
        r for r in records
        if not (r["user"] == username and r["movement"] == movement_name)
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–±–∏–ª –ª–∏ –æ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—â–∏–π —Ä–µ–∫–æ—Ä–¥ –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é
    best_for_move = max((r["weight"] for r in records if r["movement"] == movement_name), default=0)
    is_new_record = weight > best_for_move

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    records.append(record)
    save_records(records)
    if "bot_msgs" in context.user_data:
        for mid in context.user_data["bot_msgs"]:
            await delete_message_safe(context.bot, update.message.chat_id, mid)
    context.user_data.clear()
    msg = (
        f"üí• –ù–û–í–´–ô –†–ï–ö–û–†–î!\n{username} ‚Äî {weight_str} –∫–≥ –≤ {movement_name.upper()}!"
        if is_new_record
        else f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {username} ‚Äî {weight_str} –∫–≥ –≤ {movement_name.upper()}"
    )
    await safe_reply(context.bot, update.message.chat_id, msg, thread_id=thread_id or TOPIC_SIL)

async def top_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    records = load_records()
    thread_id = getattr(update.message, "message_thread_id", None)
    if not records:
        await safe_reply(context.bot, update.effective_chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", thread_id=thread_id or TOPIC_SIL)
        return
    totals = {}
    for r in records:
        totals.setdefault(r["user"], 0)
        totals[r["user"]] += float(r["weight"])
    top_users = sorted(totals.items(), key=lambda x: x[1], reverse=True)[:10]
    lines = ["üèÜ –¢–æ–ø –ø–æ —Å—É–º–º–µ:"] + [f"{u} ‚Äî {int(s)} –∫–≥" for u, s in top_users]
    await safe_reply(context.bot, update.effective_chat.id, "\n".join(lines), thread_id=thread_id or TOPIC_SIL)

# -------------------- –¢–∞–±–ª–∏—Ü–∞ PNG --------------------
def render_table_image(records):
    if not records:
        fig, ax = plt.subplots(figsize=(6, 2))
        ax.axis("off")
        ax.text(0.5, 0.5, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π", ha="center", va="center", fontsize=14)
        buf = io.BytesIO()
        fig.savefig(buf, format="png", dpi=150, bbox_inches="tight")
        plt.close(fig)
        buf.seek(0)
        return buf
    df = pd.DataFrame(records)[["user", "movement", "date", "weight"]]
    df = df.rename(columns={"user": "–ò–º—è", "movement": "–î–≤–∏–∂–µ–Ω–∏–µ", "date": "–î–∞—Ç–∞", "weight": "–í–µ—Å (–∫–≥)"})
    fig, ax = plt.subplots(figsize=(10, max(2.5, 0.4 * len(df))))
    ax.axis("off")
    rcParams.update({'font.size': 10})
    ax.text(0.5, 1.03, "–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤", ha='center', va='bottom', fontsize=14, fontweight='bold', transform=ax.transAxes)
    table = ax.table(cellText=df.values, colLabels=df.columns, cellLoc='center', loc='center')
    for (row, col), cell in table.get_celld().items():
        if row == 0:
            cell.set_text_props(weight='bold', color='white')
            cell.set_facecolor('#2E86AB')
        else:
            cell.set_facecolor('#F7FAFC' if row % 2 == 0 else 'white')
        cell.set_edgecolor('#CCCCCC')
    table.auto_set_font_size(False)
    table.set_fontsize(10)
    table.scale(1, 1.2)
    buf = io.BytesIO()
    fig.savefig(buf, format='png', dpi=150, bbox_inches='tight')
    plt.close(fig)
    buf.seek(0)
    return buf

async def table_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    records = load_records()
    buf = render_table_image(records)
    thread_id = getattr(update.message, "message_thread_id", None)
    await safe_reply_photo(context.bot, update.effective_chat.id, buf, "üìä –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤", thread_id=thread_id or TOPIC_SIL)

# -------------------- –ê–≤—Ç–æ–æ—Ç—á—ë—Ç --------------------
async def send_auto_report(context: ContextTypes.DEFAULT_TYPE):
    try:
        records = load_records()
        buf = render_table_image(records)
        caption = f"üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç ({datetime.now().strftime(DATE_FORMAT)})"
        await context.bot.send_photo(chat_id=GROUP_ID, photo=buf, caption=caption, message_thread_id=TOPIC_SIL)
    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç–∞: {e}")

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ --------------------
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    log.exception("‚ö†Ô∏è –û—à–∏–±–∫–∞: %s", context.error)
    try:
        if update and getattr(update, "message", None):
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–æ –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
    except Exception:
        pass

# -------------------- –ó–∞–ø—É—Å–∫ --------------------
def main():
    while True:
        try:
            app = ApplicationBuilder().token(BOT_TOKEN).build()
            app.add_handler(CommandHandler("help", help_cmd))
            app.add_handler(CommandHandler("sil", sil_menu))
            app.add_handler(CommandHandler("top", top_cmd))
            app.add_handler(CommandHandler("table", table_cmd))
            app.add_handler(CallbackQueryHandler(callback_movement))
            app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_for_weight))
            app.add_error_handler(error_handler)
            job_queue = app.job_queue
            job_queue.run_repeating(send_auto_report, interval=timedelta(days=REPORT_INTERVAL_DAYS), first=timedelta(seconds=10))
            log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            app.run_polling(allowed_updates=Update.ALL_TYPES, close_loop=False)
        except TelegramError as e:
            if "Conflict" in str(e):
                log.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç polling ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫.")
                time.sleep(5)
                continue
            else:
                log.exception("TelegramError: %s", e)
                time.sleep(10)
        except NetworkError:
            log.warning("–°–µ—Ç–µ–≤–æ–π —Å–±–æ–π ‚Äî –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫.")
            time.sleep(5)
        except Exception as e:
            log.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)
            time.sleep(5)

if __name__ == "__main__":
    main()
    