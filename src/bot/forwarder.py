import asyncio
import os
from telethon import TelegramClient, events
from telethon.errors import RPCError, FloodWaitError, ChannelPrivateError, UserAlreadyParticipantError
from telethon.tl.functions.channels import JoinChannelRequest

from src.config import API_ID, API_HASH, SESSION_NAME, GROUP_ID, TOPIC_FORWARD, CHANNELS_FILE, STATS_FILE
from src.utils.utils import load_json, save_json, record_stat
from src.logger import logger
from src.bot.error_reporter import add_error_to_queue

# --- Session ---
SESSION_PATH = os.path.join(os.path.dirname(__file__), SESSION_NAME)
client = TelegramClient(SESSION_PATH, API_ID, API_HASH)

# --- Channels ---
channels = []
monitored_entities = []  # –°–ø–∏—Å–æ–∫ entity –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

def reload_channels():
    global channels
    channels = load_json(CHANNELS_FILE, [])
    logger.info(f"Loaded {len(channels)} channels: {channels}")
    return channels

reload_channels()

# --- Join channel helper ---
async def try_join_channel(chan):
    try:
        entity = await client.get_entity(chan)
        try:
            await client(JoinChannelRequest(entity))
            logger.info(f"‚úÖ Joined channel {chan}")
        except UserAlreadyParticipantError:
            logger.info(f"Already participant in {chan}")
        except ChannelPrivateError:
            logger.warning(f"‚ö†Ô∏è Channel {chan} is private")
        return entity
    except Exception as e:
        logger.warning(f"‚ùå Failed to join {chan}: {e}")
        add_error_to_queue(str(e))
        return None

# --- Update monitored channels ---
async def update_monitored_channels():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    global monitored_entities
    monitored_entities = []
    
    reload_channels()
    if not channels:
        logger.warning("No channels to monitor")
        return
    
    logger.info(f"üîÑ Updating monitored channels: {channels}")
    
    for chan in channels:
        try:
            entity = await client.get_entity(chan)
            monitored_entities.append(entity.id)
            logger.info(f"‚úì Monitoring: {chan} (ID: {entity.id})")
        except Exception as e:
            logger.warning(f"‚ùå Cannot get entity for {chan}: {e}")
    
    logger.info(f"üì° Total monitored entities: {len(monitored_entities)} - IDs: {monitored_entities}")

# --- Command handler ---
@client.on(events.NewMessage(pattern=r"^/channels(?:\s.*)?$", chats=GROUP_ID))
async def channels_command(event):
    try:
        text = event.raw_text.strip()
        parts = text.split()
        
        if len(parts) == 1:
            reload_channels()
            if channels:
                await event.reply("üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(f"‚Ä¢ {ch}" for ch in channels))
            else:
                await event.reply("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª: /channels add @username")
            return

        cmd = parts[1].lower()
        if cmd == "add" and len(parts) >= 3:
            chan = parts[2]
            reload_channels()
            if chan not in channels:
                channels.append(chan)
                save_json(CHANNELS_FILE, channels)
                entity = await try_join_channel(chan)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                await update_monitored_channels()
                await event.reply(f"‚úÖ –ö–∞–Ω–∞–ª {chan} –¥–æ–±–∞–≤–ª–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è")
            else:
                await event.reply(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {chan} —É–∂–µ –µ—Å—Ç—å")
        elif cmd == "remove" and len(parts) >= 3:
            chan = parts[2]
            reload_channels()
            if chan in channels:
                channels.remove(chan)
                save_json(CHANNELS_FILE, channels)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                await update_monitored_channels()
                await event.reply(f"‚ùå –ö–∞–Ω–∞–ª {chan} —É–¥–∞–ª—ë–Ω")
            else:
                await event.reply(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {chan} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await event.reply(
                "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:**\n"
                "/channels ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
                "/channels add @username ‚Äî –¥–æ–±–∞–≤–∏—Ç—å\n"
                "/channels remove @username ‚Äî —É–¥–∞–ª–∏—Ç—å"
            )
    except Exception as e:
        logger.exception(f"channels_command error: {e}")
        add_error_to_queue(str(e))

# --- Forward handler ---
@client.on(events.NewMessage(incoming=True))
async def forward_handler(event):
    try:
        if not hasattr(forward_handler, '_counter'):
            forward_handler._counter = 0
        forward_handler._counter += 1
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        if forward_handler._counter % 100 == 0:
            await update_monitored_channels()

        if event.out:
            return

        # –í–ê–ñ–ù–û: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã (–∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∞)
        if event.chat_id == GROUP_ID or str(event.chat_id) == str(GROUP_ID):
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if event.chat_id not in monitored_entities:
            return

        chat = event.chat
        if not chat:
            return
        
        chat_username = getattr(chat, "username", None)
        chat_id = str(event.chat_id)
        chat_title = getattr(chat, "title", None)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º matched_channel –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        matched_channel = None
        if chat_username:
            matched_channel = f"@{chat_username}"
        elif chat_title:
            matched_channel = chat_title
        else:
            matched_channel = chat_id

        logger.info(f"üîÑ Forwarding from {matched_channel} (ID: {event.chat_id})")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            original_text = event.message.text or ""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫–∞–Ω–∞–ª–∞
            if chat_username:
                channel_link = f"@{chat_username}"
            elif chat_title:
                channel_link = chat_title
            else:
                channel_link = f"ID: {chat_id}"
            
            footer = f"\n\nüì¢ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞: {channel_link}"
            
            # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å –ø–æ–¥–ø–∏—Å—å—é
            if event.message.media:
                new_caption = (event.message.text or "") + footer
                kwargs = {
                    "entity": GROUP_ID,
                    "file": event.message.media,
                    "message": new_caption,
                    "silent": True
                }
                if TOPIC_FORWARD:
                    kwargs["reply_to"] = TOPIC_FORWARD
                await client.send_file(**kwargs)
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                new_text = original_text + footer
                kwargs = {
                    "entity": GROUP_ID,
                    "message": new_text,
                    "silent": True
                }
                if TOPIC_FORWARD:
                    kwargs["reply_to"] = TOPIC_FORWARD
                await client.send_message(**kwargs)
            
            record_stat(STATS_FILE, matched_channel)
            logger.info(f"‚úÖ Forwarded from {matched_channel} (silent)")
            
        except FloodWaitError as e:
            logger.warning(f"‚è≥ FloodWait {e.seconds}s")
            add_error_to_queue(f"Forwarder FloodWait {e.seconds}s: {matched_channel}")
            await asyncio.sleep(e.seconds)
            
        except RPCError as e:
            logger.error(f"RPCError forwarding from {matched_channel}: {e}")
            add_error_to_queue(f"Forwarder RPCError: {e}")
        except Exception as e:
            logger.exception(f"Forwarding error from {matched_channel}: {e}")
            add_error_to_queue(str(e))
                
    except Exception as e:
        logger.exception(f"Critical forward_handler error: {e}")
        add_error_to_queue(str(e))

# --- Run forwarder ---
async def run_forwarder():
    session_file = f"{SESSION_PATH}.session"
    if not os.path.exists(session_file):
        logger.error(f"Session file not found: {session_file}")
        raise FileNotFoundError(f"Session file not found: {session_file}")

    while True:
        try:
            await client.start()
            me = await client.get_me()
            logger.info(f"‚úÖ Logged in as: {me.first_name} (@{me.username})")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
            reload_channels()
            if channels:
                logger.info(f"üì° Joining {len(channels)} channels...")
                for ch in channels:
                    await try_join_channel(ch)
                    await asyncio.sleep(1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await update_monitored_channels()
            
            logger.info("üöÄ Forwarder running...")
            logger.info(f"üëÄ Watching {len(monitored_entities)} channels")
            await client.run_until_disconnected()
        except (OSError, ConnectionError, asyncio.TimeoutError) as e:
            logger.warning(f"Connection lost: {e}. Reconnecting in 10s...")
            add_error_to_queue(str(e))
            await asyncio.sleep(10)
        except Exception as e:
            logger.exception(f"Critical forwarder error: {e}")
            add_error_to_queue(str(e))
            await asyncio.sleep(10)

if __name__ == "__main__":
    asyncio.run(run_forwarder())