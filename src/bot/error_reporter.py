import asyncio
from datetime import datetime
from telegram.ext import Application
from src.config import REPORT_TIME, ADMIN_ID, MSK_TZ
from src.logger import logger

_error_queue = []

def add_error_to_queue(err: str):
    _error_queue.append(f"[{datetime.now(MSK_TZ).strftime('%Y-%m-%d %H:%M:%S')}] {err}")

async def send_daily_error_report(app: Application):
    if not _error_queue:
        logger.info("–ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç—á—ë—Ç–∞.")
        return
    text = "üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–∞—Ö:\n\n" + "\n".join(_error_queue[-50:])
    _error_queue.clear()
    try:
        await app.bot.send_message(chat_id=ADMIN_ID, text=text)
        logger.info("–û—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É: {e}")

def start_daily_error_scheduler(app: Application):
    app.job_queue.run_daily(send_daily_error_report, time=REPORT_TIME, name="daily_error_report")
